<?php

namespace WilsonLanguageCustomElements;

use function Breakdance\Elements\c;
use function Breakdance\Elements\PresetSections\getPresetSection;


\Breakdance\ElementStudio\registerElementForEditing(
    "WilsonLanguageCustomElements\\StatsBar",
    \Breakdance\Util\getdirectoryPathRelativeToPluginFolder(__DIR__)
);

class StatsBar extends \Breakdance\Elements\Element
{
    static function uiIcon()
    {
        return 'SquareIcon';
    }

    static function tag()
    {
        return 'div';
    }

    static function tagOptions()
    {
        return [];
    }

    static function tagControlPath()
    {
        return false;
    }

    static function name()
    {
        return 'Stats Bar';
    }

    static function className()
    {
        return 'autogenerated-wlce-statsbar';
    }

    static function category()
    {
        return 'blocks';
    }

    static function badge()
    {
        return false;
    }

    static function slug()
    {
        return get_class();
    }

    static function template()
    {
        return file_get_contents(__DIR__ . '/html.twig');
    }

    static function defaultCss()
    {
        return file_get_contents(__DIR__ . '/default.css');
    }

    static function defaultProperties()
    {
        return false;
    }

    static function defaultChildren()
    {
        return false;
    }

    static function cssTemplate()
    {
        $template = file_get_contents(__DIR__ . '/css.twig');
        return $template;
    }

    static function designControls()
    {
        return [c(
        "items",
        "Items",
        [getPresetSection(
      "EssentialElements\\spacing_padding_all",
      "Padding",
      "padding",
       ['type' => 'popout']
     )],
        ['type' => 'section'],
        false,
        false,
        [],
      )];
    }

    static function contentControls()
    {
        return [c(
        "content",
        "Content",
        [c(
        "items",
        "Items",
        [c(
        "number",
        "Number",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "text",
        "Text",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'textOptions' => ['multiline' => true]],
        false,
        false,
        [],
      )],
        ['type' => 'repeater', 'layout' => 'vertical', 'repeaterOptions' => ['titleTemplate' => '{number} {text}', 'defaultTitle' => '', 'buttonName' => '']],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      )];
    }

    static function settingsControls()
    {
        return [];
    }

    static function dependencies()
    {
        return ['0' =>  ['inlineScripts' => ['const numberElements = document.querySelectorAll(\'.wlt-stats-bar_number\');

function animateElement(element, delay) {
  const targetNumberString = element.dataset.target.replace(/m$|\,/g, \'\'); // Remove commas and trailing "M"

  let targetNumber;
  let unit = \'\';

  // Use case-insensitive regular expression
  if (targetNumberString.match(/m$/i)) { // Check for "M" at the end (case-insensitive)
    unit = \'M\';
    targetNumber = parseFloat(targetNumberString.slice(0, -1), 10); // Extract number before "M"
  } else {
    targetNumber = parseFloat(targetNumberString, 10);
  }

  const duration = 5000; // Animation duration in milliseconds (3 seconds)

  function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, \',\');
  }

  const step = Math.ceil(targetNumber / (duration / 160)); // Calculate increment per frame

  let currentNumber = 0;

  const animationInterval = setInterval(() => {
    currentNumber += step;

    if (currentNumber >= targetNumber) {
      currentNumber = targetNumber;
      clearInterval(animationInterval); // Stop animation when target reached
    }

    if (unit) { // Check if unit is not an empty string (once)
      element.textContent = numberWithCommas(currentNumber.toFixed(0)) + unit;
    } else {
      element.textContent = numberWithCommas(currentNumber.toFixed(0));
    }
  }, 16); // Update text content every 16 milliseconds (roughly 60 FPS)
}

let delay = 0; // Starting delay for animation (increases for each element)

numberElements.forEach((element, index) => {
  // Use setTimeout to schedule animation with a delay
  setTimeout(() => {
    animateElement(element, delay);
  }, delay);

  // Increase delay for next element (adjust for desired stagger effect)
  delay += 700; // Increase delay by 100 milliseconds for each element
});'],],];
    }

    static function settings()
    {
        return false;
    }

    static function addPanelRules()
    {
        return false;
    }

    static public function actions()
    {
        return false;
    }

    static function nestingRule()
    {
        return ["type" => "final",   ];
    }

    static function spacingBars()
    {
        return false;
    }

    static function attributes()
    {
        return false;
    }

    static function experimental()
    {
        return false;
    }

    static function order()
    {
        return 0;
    }

    static function dynamicPropertyPaths()
    {
        return ['0' => ['path' => 'settings.advanced.attributes[].value', 'accepts' => 'string'], '1' => ['path' => 'settings.advanced.attributes[].value', 'accepts' => 'string']];
    }

    static function additionalClasses()
    {
        return false;
    }

    static function projectManagement()
    {
        return false;
    }

    static function propertyPathsToWhitelistInFlatProps()
    {
        return false;
    }

    static function propertyPathsToSsrElementWhenValueChanges()
    {
        return false;
    }
}
