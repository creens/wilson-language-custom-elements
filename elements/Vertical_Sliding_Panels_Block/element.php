<?php

namespace WilsonLanguageCustomElements;

use function Breakdance\Elements\c;
use function Breakdance\Elements\PresetSections\getPresetSection;


\Breakdance\ElementStudio\registerElementForEditing(
    "WilsonLanguageCustomElements\\VerticalSlidingPanelsBlock",
    \Breakdance\Util\getdirectoryPathRelativeToPluginFolder(__DIR__)
);

class VerticalSlidingPanelsBlock extends \Breakdance\Elements\Element
{
    static function uiIcon()
    {
        return 'SquareIcon';
    }

    static function tag()
    {
        return 'div';
    }

    static function tagOptions()
    {
        return [];
    }

    static function tagControlPath()
    {
        return false;
    }

    static function name()
    {
        return 'Vertical Sliding Panels Block';
    }

    static function className()
    {
        return 'autogenerated-wlce-verticalslidingpanelsblock';
    }

    static function category()
    {
        return 'blocks';
    }

    static function badge()
    {
        return false;
    }

    static function slug()
    {
        return get_class();
    }

    static function template()
    {
        return file_get_contents(__DIR__ . '/html.twig');
    }

    static function defaultCss()
    {
        return file_get_contents(__DIR__ . '/default.css');
    }

    static function defaultProperties()
    {
        return false;
    }

    static function defaultChildren()
    {
        return false;
    }

    static function cssTemplate()
    {
        $template = file_get_contents(__DIR__ . '/css.twig');
        return $template;
    }

    static function designControls()
    {
        return [];
    }

    static function contentControls()
    {
        return [c(
        "sliding_panels",
        "Sliding Panels",
        [c(
        "panels",
        "Panels",
        [c(
        "color",
        "Color",
        [],
        ['type' => 'dropdown', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'wilson-blue', 'text' => 'Wilson Blue'], '1' => ['text' => 'Implementation Teal', 'value' => 'implementation-teal'], '2' => ['text' => 'Fun Gold', 'value' => 'fun-gold'], '3' => ['text' => 'Fundations Salmon', 'value' => 'fundations-salmon'], '4' => ['text' => 'Fundations Purple', 'value' => 'fundations-purple'], '5' => ['text' => 'Fundations Blue', 'value' => 'fundations-blue'], '6' => ['text' => 'Fundations Teal', 'value' => 'fundations-teal']], 'buttonBarOptions' => ['size' => 'small', 'layout' => 'default']],
        false,
        false,
        [],
      ), c(
        "background_pattern",
        "Background Pattern",
        [],
        ['type' => 'dropdown', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'abc-paper', 'text' => 'ABC Paper'], '1' => ['text' => 'Open Book', 'value' => 'open-book'], '2' => ['text' => 'Bundles', 'value' => 'bundles'], '3' => ['text' => 'Digital', 'value' => 'digital'], '4' => ['text' => 'Graded Paper', 'value' => 'graded-paper'], '5' => ['text' => 'Interactive', 'value' => 'interactive'], '6' => ['text' => 'Tiers of Instruction', 'value' => 'tiers']]],
        false,
        false,
        [],
      ), c(
        "graphic",
        "Graphic",
        [],
        ['type' => 'button_bar', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'wlt-icon', 'text' => 'Icon'], '1' => ['text' => 'Number', 'value' => 'wlt-number']]],
        false,
        false,
        [],
      ), c(
        "title",
        "Title",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "description",
        "Description",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "more_info",
        "More Info",
        [],
        ['type' => 'richtext', 'layout' => 'vertical'],
        false,
        false,
        [],
      )],
        ['type' => 'repeater', 'layout' => 'vertical', 'repeaterOptions' => ['titleTemplate' => '', 'defaultTitle' => '', 'buttonName' => 'Add Panel', 'galleryMode' => false]],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "content_area",
        "Content Area",
        [c(
        "eyebrow_header_color",
        "Eyebrow Header Color",
        [],
        ['type' => 'button_bar', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'blue', 'text' => 'Blue'], '1' => ['text' => 'Gold', 'value' => 'gold'], '2' => ['text' => 'Teal', 'value' => 'teal']]],
        false,
        false,
        [],
      ), c(
        "eyebrow_header_text",
        "Eyebrow Header text",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "headline",
        "Headline",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "body_copy",
        "Body Copy",
        [],
        ['type' => 'richtext', 'layout' => 'vertical'],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "button_s_",
        "Button(s)",
        [c(
        "quantity",
        "Quantity",
        [],
        ['type' => 'button_bar', 'layout' => 'vertical', 'items' => ['0' => ['value' => 'one', 'text' => 'One'], '1' => ['text' => 'Two', 'value' => 'two']], 'buttonBarOptions' => ['size' => 'small', 'layout' => 'default']],
        false,
        false,
        [],
      ), getPresetSection(
      "EssentialElements\\AtomV1ButtonContent",
      "Button 1",
      "button_1",
       ['condition' => ['0' => ['0' => ['path' => 'content.button_s_.quantity', 'operand' => 'equals', 'value' => 'one']], '1' => ['0' => ['path' => 'content.button_s_.quantity', 'operand' => 'equals', 'value' => 'two']]], 'type' => 'popout']
     ), getPresetSection(
      "EssentialElements\\AtomV1ButtonContent",
      "Button 2",
      "button_2",
       ['condition' => ['0' => ['0' => ['path' => 'content.button_s_.quantity', 'operand' => 'equals', 'value' => 'two']]], 'type' => 'popout']
     )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      )];
    }

    static function settingsControls()
    {
        return [];
    }

    static function dependencies()
    {
        return ['0' =>  ['inlineScripts' => ['const panels = document.querySelectorAll(".wlt-vert-panel");

function togglePanelInfo(e) {
   let t = e.querySelector(".vert-cover"),
    l = e.querySelector(".wlt-vert-info"),
    s = e.querySelector(".vert-cover .wlt-vert-text img"),
    r = l.classList.contains("expanded");
  r ? (t.classList.remove("collapsed"), l.classList.remove("expanded"), s.classList.remove("down")) : (t.classList.add("collapsed"), l.classList.add("expanded"), s.classList.add("down"));
}

panels.forEach((panel) => {
  let t = panel.querySelector(".vert-cover");
  if (window.navigator.maxTouchPoints > 0) {
    t.addEventListener("touchstart", () => togglePanelInfo(panel)); // Use panel captured outside
  } else {
    t.addEventListener("click", () => togglePanelInfo(panel)); // Use panel captured outside
  }
});
','window.addEventListener(\'DOMContentLoaded\', (event) => {
  function replaceWithSVG(targetElementId, imageUrl) {
  fetch(imageUrl)
    .then(response => response.text())
    .then(data => {
      const targetElement = document.getElementById(targetElementId);
      if (targetElement) {
        targetElement.outerHTML = data;
      } else {
        console.warn("Target element not found for ID:", targetElementId);
      }
    })
    .catch(error => console.error("Error fetching SVG:", error));
}

  const panels = document.querySelectorAll(\'.wlt-vert-panel\');

  for (const panel of panels) {
    // Check if the panel has an icon element
    const iconElement = panel.querySelector(\'.icon\');
    if (iconElement) {
      const backgroundPattern = panel.querySelector(\'.pattern\').classList[1];

      // Use the icon element\'s ID directly (assuming it\'s unique)
      const targetElementId = iconElement.id;

      if (targetElementId) {
    replaceWithSVG(targetElementId, "https://wilsonlanguage.local/wp-content/uploads/2024/05/icon-" + backgroundPattern + ".svg");
  }
    }
  }
});
'],],];
    }

    static function settings()
    {
        return false;
    }

    static function addPanelRules()
    {
        return false;
    }

    static public function actions()
    {
        return false;
    }

    static function nestingRule()
    {
        return ["type" => "final",   ];
    }

    static function spacingBars()
    {
        return false;
    }

    static function attributes()
    {
        return false;
    }

    static function experimental()
    {
        return false;
    }

    static function order()
    {
        return 0;
    }

    static function dynamicPropertyPaths()
    {
        return ['0' => ['path' => 'settings.advanced.attributes[].value', 'accepts' => 'string'], '1' => ['path' => 'settings.advanced.attributes[].value', 'accepts' => 'string']];
    }

    static function additionalClasses()
    {
        return false;
    }

    static function projectManagement()
    {
        return false;
    }

    static function propertyPathsToWhitelistInFlatProps()
    {
        return false;
    }

    static function propertyPathsToSsrElementWhenValueChanges()
    {
        return false;
    }
}
